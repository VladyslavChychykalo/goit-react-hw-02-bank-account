{"version":3,"sources":["components/Dashboard/TransactionHistory/TransactionHistory.module.css","components/Dashboard/Balance/Balance.module.css","components/Dashboard/Controls/Controls.module.css","components/Dashboard/Controls/Controls.jsx","components/Dashboard/Balance/Balance.jsx","components/Dashboard/TransactionHistory/TransactionHistory.jsx","components/Dashboard/Dashboard.jsx","components/App.jsx","index.js"],"names":["module","exports","Controls","state","amount","handleChange","target","setState","name","Number","value","handleItemValue","props","onTakeValue","reset","this","className","styles","controls","input","type","onChange","button","onClick","Component","Balance","balance","items","green","role","aria-label","filter","el","reduce","acc","red","TransactionHistory","history","map","item","key","id","date","Dashboard","transactions","noMoney","toast","equalZero","addBankValue","Date","transaction","shortid","generate","toLocaleString","prevState","persistedAccount","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","autoClose","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.307a7a00.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__2pmSD\",\"type\":\"TransactionHistory_type__OimbI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__3oSG9\",\"green\":\"Balance_green__28JUP\",\"red\":\"Balance_red__3diRx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__3L92f\",\"button\":\"Controls_button__YOdPz\",\"input\":\"Controls_input__JZ132\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nclass Controls extends Component {\n  state = {\n    amount: '',\n  };\n\n  static propTypes = {\n    onTakeValue: PropTypes.func.isRequired,\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: Number(target.value),\n    });\n  };\n\n  handleItemValue = target => {\n    const { amount } = this.state;\n    this.props.onTakeValue(amount, target);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      amount: '',\n    });\n  };\n\n  render() {\n    const { amount } = this.state;\n    return (\n      <section className={styles.controls}>\n        <input\n          className={styles.input}\n          type=\"number\"\n          name=\"amount\"\n          value={amount}\n          onChange={this.handleChange}\n        />\n        <button\n          name=\"deposit\"\n          className={styles.button}\n          type=\"button\"\n          onClick={({ target }) => this.handleItemValue(target)}\n        >\n          Deposit\n        </button>\n        <button\n          name=\"withdraw\"\n          className={styles.button}\n          type=\"button\"\n          onClick={({ target }) => this.handleItemValue(target)}\n        >\n          Withdraw\n        </button>\n      </section>\n    );\n  }\n}\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = ({ balance, items }) => (\n  <section className={styles.balance}>\n    <span className={styles.balance}>\n      <span className={styles.green} role=\"img\" aria-label=\"ArrowUp\">\n        ⬆\n      </span>\n      {items\n        .filter(el => el.type === 'deposit')\n        .reduce((acc, el) => acc + Number(el.amount), 0)}\n      $\n    </span>\n    <span className={styles.balance}>\n      <span className={styles.red} role=\"img\" aria-label=\"ArrowDown\">\n        ⬇\n      </span>\n      {items\n        .filter(el => el.type === 'withdraw')\n        .reduce((acc, el) => acc + Number(el.amount), 0)}\n      $\n    </span>\n    <span>Balance: {balance}$</span>\n  </section>\n);\n\nBalance.propTypes = {\n  balance: PropTypes.number.isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ items }) => {\n  return (\n    <table className={styles.history}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map(item => (\n          <tr key={item.id}>\n            <td className={styles.type}>{item.type}</td>\n            <td>{item.amount}$</td>\n            <td>{item.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport shortid from 'shortid';\nimport Controls from './Controls/Controls';\nimport Balance from './Balance/Balance';\nimport TransactionHistory from './TransactionHistory/TransactionHistory';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Dashboard extends Component {\n  state = {\n    transactions: [],\n    balance: 0,\n  };\n\n  componentDidMount() {\n    const persistedAccount = localStorage.getItem('account');\n\n    if (persistedAccount) {\n      this.setState(JSON.parse(persistedAccount));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      localStorage.setItem('account', JSON.stringify(this.state));\n    }\n  }\n\n  noMoney = () => {\n    toast('На счету недостаточно средств для проведения операции!');\n  };\n\n  equalZero = () => {\n    toast('Введите сумму для проведения операции!');\n  };\n\n  addBankValue = (amount, target) => {\n    const date = new Date();\n    const { balance } = this.state;\n\n    if (Number(amount) <= 0) {\n      this.equalZero();\n      return;\n    }\n\n    if (target.name === 'withdraw' && Number(amount) >= balance) {\n      this.noMoney();\n      return;\n    }\n\n    const transaction = {\n      id: shortid.generate(),\n      type: target.name,\n      amount,\n      date: date.toLocaleString(),\n    };\n    this.setState(prevState => ({\n      transactions: [...prevState.transactions, transaction],\n      balance:\n        target.name === 'deposit'\n          ? prevState.balance + amount\n          : prevState.balance - amount,\n    }));\n  };\n\n  render() {\n    const { transactions, balance } = this.state;\n    return (\n      <>\n        <div className=\"dashboard\">\n          <Controls onTakeValue={this.addBankValue} balance={balance} />\n          <Balance balance={balance} items={transactions} />\n          <TransactionHistory items={transactions} />\n        </div>\n        <ToastContainer autoClose={5000} />\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from './Dashboard/Dashboard';\nimport '../common/css/dashboard.css';\n\nconst App = () => <Dashboard />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}