{"version":3,"sources":["components/Dashboard/TransactionHistory/TransactionHistory.module.css","components/Dashboard/Balance/Balance.module.css","components/Dashboard/Controls/Controls.module.css","components/Dashboard/Controls/Controls.jsx","components/Dashboard/Balance/Balance.jsx","components/Dashboard/TransactionHistory/TransactionHistory.jsx","components/Dashboard/Dashboard.jsx","components/App.jsx","index.js"],"names":["module","exports","Controls","state","amount","noMoney","toast","equalZero","handleItemDeposit","date","Date","Number","transactionItem","id","shortid","generate","type","toLocaleString","props","onDeposit","reset","handleItemWithdraw","balance","onWithdraw","setState","handleChange","target","name","value","this","className","styles","controls","input","onChange","button","onClick","autoClose","Component","Balance","income","expenses","green","role","aria-label","red","TransactionHistory","items","history","map","item","key","Dashboard","transactions","handleDeposit","handleWithdraw","persistedAccount","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a142729b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__2pmSD\",\"type\":\"TransactionHistory_type__OimbI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__3oSG9\",\"green\":\"Balance_green__28JUP\",\"red\":\"Balance_red__3diRx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__3L92f\",\"button\":\"Controls_button__YOdPz\",\"input\":\"Controls_input__JZ132\"};","import React, { Component } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nclass Controls extends Component {\n  state = {\n    amount: '',\n  };\n\n  static propTypes = {\n    onDeposit: PropTypes.func.isRequired,\n    onWithdraw: PropTypes.func.isRequired,\n    balance: PropTypes.number.isRequired,\n  };\n\n  noMoney = () => {\n    toast('На счету недостаточно средств для проведения операции!');\n  };\n\n  equalZero = () => {\n    toast('Введите сумму для проведения операции!');\n  };\n\n  handleItemDeposit = () => {\n    const { amount } = this.state;\n    const date = new Date();\n    if (Number(amount) <= 0) {\n      this.equalZero();\n    } else {\n      const transactionItem = {\n        id: shortid.generate(),\n        type: 'deposit',\n        amount: Number(amount),\n        date: date.toLocaleString(),\n      };\n      this.props.onDeposit(transactionItem);\n    }\n    this.reset();\n  };\n\n  handleItemWithdraw = () => {\n    const { amount } = this.state;\n    const { balance } = this.props;\n    const date = new Date();\n    if (Number(amount) >= balance) {\n      this.noMoney();\n    } else {\n      const transactionItem = {\n        id: shortid.generate(),\n        type: 'withdraw',\n        amount: Number(amount),\n        date: date.toLocaleString(),\n      };\n      this.props.onWithdraw(transactionItem);\n    }\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      amount: '',\n    });\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  render() {\n    const { amount } = this.state;\n    return (\n      <>\n        <section className={styles.controls}>\n          <input\n            className={styles.input}\n            type=\"number\"\n            name=\"amount\"\n            value={amount}\n            onChange={this.handleChange}\n          />\n          <button\n            className={styles.button}\n            type=\"button\"\n            onClick={this.handleItemDeposit}\n          >\n            Deposit\n          </button>\n          <button\n            className={styles.button}\n            type=\"button\"\n            onClick={this.handleItemWithdraw}\n          >\n            Withdraw\n          </button>\n        </section>\n        <ToastContainer autoClose={5000} />\n      </>\n    );\n  }\n}\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = ({ balance, income, expenses }) => {\n  return (\n    <section className={styles.balance}>\n      <span className={styles.balance}>\n        <span className={styles.green} role=\"img\" aria-label=\"ArrowUp\">\n          ⬆\n        </span>\n        {income}$\n      </span>\n      <span className={styles.balance}>\n        <span className={styles.red} role=\"img\" aria-label=\"ArrowDown\">\n          ⬇\n        </span>\n        {expenses}$\n      </span>\n      <span>Balance: {balance}$</span>\n    </section>\n  );\n};\n\nBalance.propTypes = {\n  balance: PropTypes.number.isRequired,\n  income: PropTypes.number.isRequired,\n  expenses: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ items }) => {\n  return (\n    <table className={styles.history}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map(item => (\n          <tr key={item.id}>\n            <td className={styles.type}>{item.type}</td>\n            <td>{item.amount}$</td>\n            <td>{item.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport Controls from './Controls/Controls';\nimport Balance from './Balance/Balance';\nimport TransactionHistory from './TransactionHistory/TransactionHistory';\n\nclass Dashboard extends Component {\n  state = {\n    transactions: [],\n    balance: 0,\n    income: 0,\n    expenses: 0,\n  };\n\n  componentDidMount() {\n    const persistedAccount = localStorage.getItem('account');\n\n    if (persistedAccount) {\n      this.setState(JSON.parse(persistedAccount));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      localStorage.setItem('account', JSON.stringify(this.state));\n    }\n  }\n\n  handleDeposit = item => {\n    const { transactions, balance, income } = this.state;\n    this.setState({\n      transactions: [...transactions, item],\n      balance: balance + item.amount,\n      income: income + item.amount,\n    });\n  };\n\n  handleWithdraw = item => {\n    const { transactions, balance, expenses } = this.state;\n    this.setState({\n      transactions: [...transactions, item],\n      balance: balance - item.amount,\n      expenses: expenses + item.amount,\n    });\n  };\n\n  render() {\n    const { transactions, balance, income, expenses } = this.state;\n    return (\n      <div className=\"dashboard\">\n        <Controls\n          onDeposit={this.handleDeposit}\n          onWithdraw={this.handleWithdraw}\n          balance={balance}\n        />\n        <Balance balance={balance} income={income} expenses={expenses} />\n        <TransactionHistory items={transactions} />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from './Dashboard/Dashboard';\nimport '../common/css/dashboard.css';\n\nconst App = () => (\n  <div>\n    <Dashboard />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}